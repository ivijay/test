package test

import java.io.{InputStreamReader, BufferedReader, InputStream}
import java.net.Socket
import org.apache.spark.{SparkConf, Logging}
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.StreamingContext._
import org.apache.spark.streaming.receiver.Receiver
import java.util.logging.Logger;
import twitter4j.Query;
import twitter4j.QueryResult;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;

object CustomReceiver {
	def main(args: Array[String]) {
//		if (args.length < 2) {
//			System.err.println("Usage: CustomReceiver <hostname> <port>")
//			System.exit(1)
//		}
		// Create the context with a 1 second batch size
		val sparkConf = new SparkConf().setAppName("CustomReceiver").setMaster("local")
		val ssc = new StreamingContext(sparkConf, Seconds(1))
		// Create a input stream with the custom receiver on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		val lines = ssc.receiverStream(new CustomReceiver())
		val words = lines.flatMap(_.split(" "))
		val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
		wordCounts.print()
		ssc.start()
		ssc.awaitTermination()
	}
}
class CustomReceiver()
extends Receiver[String](StorageLevel.MEMORY_AND_DISK_2) with Logging {
	def onStart() {
		// Start the thread that receives data over a connection
		new Thread("Socket Receiver") {
			override def run() { receive() }
		}.start()
	}
	def onStop() {
		// There is nothing much to do as the thread calling receive()
		// is designed to stop by itself isStopped() returns false
	}
	/** Create a socket connection and receive data until receiver is stopped */
	private def receive() {
		var socket: Socket = null
				var userInput: String = null
				try {
					logInfo("Connecting to twitter"  )
					val reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))
					userInput = reader.readLine()
					while(!isStopped && userInput != null) {
						store(userInput)
						userInput = reader.readLine()
					}
					reader.close()
					socket.close()
					logInfo("Stopped receiving")
					restart("Trying to connect again")
				} catch {
				case e: java.net.ConnectException =>
//				restart("Error connecting to " + host + ":" + port, e)
				case t: Throwable =>
				restart("Error receiving data", t)
				}
	}
}