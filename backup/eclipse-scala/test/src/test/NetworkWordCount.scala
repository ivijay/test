package test

import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.StreamingContext._
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming._

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: NetworkWordCount <hostname> <port>
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 * `$ nc -lk 9999`
 * and then run the example
 * `$ bin/run-example org.apache.spark.examples.streaming.NetworkWordCount localhost 9999`
 */
object NetworkWordCount {
  val WINDOW_LENGTH = new Duration(30 * 1000)
  val SLIDE_INTERVAL = new Duration(10 * 1000)
	def main(args: Array[String]) {
		if (args.length < 2) {
			System.err.println("Usage: NetworkWordCount <hostname> <port>")
			System.exit(1)
		}
		println("start of program")
		//test.setStreamingLogLevels()
		// Create the context with a 1 second batch size
		val sparkConf = new SparkConf().setAppName("NetworkWordCount").setMaster("local")
		val ssc = new StreamingContext(sparkConf, Seconds(1))
		// Create a socket stream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
		val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
		
		val words = lines.flatMap(_.split(" "))
		
		val windowDStream = words.window(WINDOW_LENGTH, SLIDE_INTERVAL)

		
		windowDStream.foreachRDD(x=> {
		  println("count" + x.count)
		  println("in windowDStream")
		  
		  x.foreach(println)
		})
		
//		wordCounts.print()
		
		
		ssc.start()
		ssc.awaitTermination()
	}
}